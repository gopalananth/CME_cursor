@using System.Linq.Expressions
@model Chef_Middle_East_Form.Models.Form

@{
    ViewBag.Title = "Lead Form";
}
<link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>


    body {
        background: #f5f5f4;
        padding: 0;
        font-family: "Nunito Sans", sans-serif;
    }

    .navbar-inverse {
        background-color: #9e0b2a;
        border-color: #9e0b2a;
        position: relative;
        margin-bottom: 5px !important;
    }

    .section-field {
        background: #fff;
        padding: 14px 28px;
        border-radius: 10px;
        margin-top: 25px;
        border: 1px solid #e7e5e4;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .section-field .form-group label {
        color: #44403c;
        font-size: 16px;
        font-weight: normal;
        margin: 0 0 3px 0;
        line-height: 20px;
    }

    .section-field select.form-control, .section-field input.form-control {
        border: 1px solid #ccc;
        border-radius: 4px;
        color: #2c2c2c;
        background-color: #fff;
        width: 100%;
        padding: 10px;
        height: auto;
        max-width: none;
        font-size: 16px;
        outline: none !important;
        line-height: normal;
    }

    .section-field .section-title {
        font-weight: bold;
        font-size: 20px;
        margin-bottom: 25px;
        margin-top: 5px;
        color: #58595b;
        border-bottom: 1px solid #d7d7d7;
        padding-bottom: 5px;
    }

    .section-field input.form-control[readonly] {
        background-color: #eeeeee;
        opacity: 1;
    }

    .text-danger {
        margin: 20px 0 4px 0;
    }

    .generate-btn {
        /*  color: #58595b;
        background-color: #f0dbd3;
        border: none;
        outline: none;
        font-size: 16px;
        transition: 0.6s;*/
        background-color: #9e0b2a;
        cursor: pointer;
        display: inline-block;
        padding: 13px 14px 13px 20px;
        border: none;
        align-items: center;
        border-radius: 10px;
        margin-top: 20px;
        font-size: 16px;
        font-weight: 600;
        letter-spacing: 0;
        line-height: 1.3;
        transition: 0.6s;
        outline: none;
    }

        .generate-btn:hover, .generate-btn:focus, .generate-btn:active:focus {
            color: #353535;
            background-color: #cfaf9f;
            border: none;
            outline: none;
        }

    .navbar-brand {
        height: auto;
        padding: 12px 0 8px 0;
        margin: 0 !important;
    }

        .navbar-brand img {
            width: 110px;
        }

    .navbar-toggle {
        display: none;
    }

    .submit-btn {
        background-color: #9e0b2a;
        cursor: pointer;
        display: inline-block;
        padding: 13px 14px 13px 20px;
        border: none;
        align-items: center;
        border-radius: 10px;
        margin-top: 20px;
        font-size: 16px;
        font-weight: 600;
        letter-spacing: 0;
        line-height: 1.3;
        transition: 0.6s;
        outline: none;
    }


        .submit-btn:hover, .submit-btn:active, .submit-btn:focus, .submit-btn:active:focus {
            background-color: #6f081d;
            outline: none;
            border: none;
        }

        .submit-btn span {
            display: inline-block;
            margin-top: 1px;
            float: right;
            height: 18px;
            margin-left: 10px;
        }

    .Save-btn {
        background-color: #9e0b2a;
        cursor: pointer;
        display: inline-block;
        padding: 13px 14px 13px 20px;
        border: none;
        align-items: center;
        border-radius: 10px;
        margin-top: 20px;
        font-size: 16px;
        font-weight: 600;
        letter-spacing: 0;
        line-height: 1.3;
        transition: 0.6s;
        outline: none;
    }


        .Save-btn:hover, .Save-btn:active, .Save-btn:focus, .Save-btn:active:focus {
            background-color: #6f081d;
            outline: none;
            border: none;
        }

        .Save-btn span {
            display: inline-block;
            margin-top: 1px;
            float: right;
            height: 18px;
            margin-left: 10px;
        }
</style>

@using (Html.BeginForm("Create", "Form", FormMethod.Post, new { id = "customerForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    bool isReadOnly = !string.IsNullOrEmpty(Request.QueryString["leadId"]);
    @Html.HiddenFor(model => model.LeadId)
    @Html.HiddenFor(model => model.Email)
    @Html.HiddenFor(model => model.Ecomerce)
    @Html.HiddenFor(model => model.Reason)
    @Html.HiddenFor(model => model.InventorySystem)
    @Html.HiddenFor(model => model.EmailSenton)

    <!-- Company Information Section -->
<div class="section-field">
    <div class="section-title">Company Information</div>
    <div id="CompanyInformation">
        <div class="form-group">
            <label for="CustomerPaymentMethod">
                @Html.DisplayNameFor(model => model.CustomerPaymentMethod)
                <span class="text-danger">*</span>
            </label>
            @Html.DropDownListFor(model => model.CustomerPaymentMethod,
                new SelectList(new[] { "Cash", "Cheque", "Transfer" }),
                "Select Payment Method",
                new { @class = "form-control", id = "CustomerPaymentMethod", @required = true })
            @Html.ValidationMessageFor(model => model.CustomerPaymentMethod, "", new { @class = "text-danger", @required = "required" })
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Branch)
            @Html.TextBoxFor(model => model.Branch, new { @class = "form-control", @id = "branchField", @readonly = isReadOnly ? "readonly" : null })
        </div>
        <div class="form-group">
            <label for="CompanyName">
                @Html.DisplayNameFor(model => model.CompanyName)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", @required = true })
            @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
        </div>


        <div class="form-group">
            <label for="TradeName">
                @Html.DisplayNameFor(model => model.TradeName)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.TradeName, new { @class = "form-control", @required = true })
            @Html.ValidationMessageFor(model => model.TradeName)
        </div>
        <div class="form-group">
            <label for="TradeLicenseNumber">
                @Html.DisplayNameFor(model => model.TradeLicenseNumber)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.TradeLicenseNumber, new { @class = "form-control", @required = true })
            @Html.ValidationMessageFor(model => model.TradeLicenseNumber, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <label for="LicenseExpiryDate">
                @Html.DisplayNameFor(model => model.LicenseExpiryDate)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.LicenseExpiryDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "LicenseExpiry", @required = true })
            @Html.ValidationMessageFor(model => model.LicenseExpiryDate, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <label for="TradeLicense">
                @Html.DisplayNameFor(model => model.TradeLicense)
                <span class="text-danger">*</span>
            </label>

            @if (Model.TradeLicenseFileData != null && Model.TradeLicenseFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.TradeLicenseFileData)"
                       download="@Model.TradeLicenseFileName">
                        @Model.TradeLicenseFileName
                    </a>
                </p>
            }

            <input type="file" name="TradeLicense" id="TradeLicense" class="form-control" /><p id="tradeLicensefileSizeDisplay"></p>
            @Html.ValidationMessage("TradeLicense", "", new { @class = "text-danger", @required = true })
        </div>


        <div class="form-group">
            <label for="LicenseExpiryDate">
                @Html.DisplayNameFor(model => model.MainPhone)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.MainPhone, new { @class = "form-control", @required = true })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VatNumber)
            @Html.TextBoxFor(model => model.VatNumber, new { @class = "form-control", id = "VatNumber" })
        </div>

        <div class="form-group">
            <label for="VatCertificate">
                @Html.DisplayNameFor(model => model.VatCertificate)
                @if (!string.IsNullOrWhiteSpace(Model.VatNumber))
                {
                    <span class="text-danger">*</span>
                }
            </label>

            @if (Model.VatCertificateFileData != null && Model.VatCertificateFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.VatCertificateFileData)"
                       download="@Model.VatCertificateFileName">
                        @Model.VatCertificateFileName
                    </a>
                </p>
            }

            <input type="file" name="VatCertificate" id="VatCertificate" class="form-control" /><p id="vatcertificatefileSizeDisplay"></p>
            @Html.ValidationMessage("VatCertificate", "", new { @class = "text-danger" })
        </div>
    </div>

    </div>

    <!-- Stakeholders Section -->
<div class="section-field">
    <div class="section-title">Stakeholders</div>
    <div id="InchargeInformation">
        <div class="form-group">
            <label for="PersonInChargeFirstName">
                @Html.DisplayNameFor(model => model.PersonInChargeFirstName)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.PersonInChargeFirstName, new { @class = "form-control", @required = "required" })
        </div>

        <div class="form-group">
            <label for="PersonInChargeLastName">
                @Html.DisplayNameFor(model => model.PersonInChargeLastName)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.PersonInChargeLastName, new { @class = "form-control", @required = "required" })
        </div>

        <div class="form-group">
            <label for="PersonInChargePhoneNumber">
                @Html.DisplayNameFor(model => model.PersonInChargePhoneNumber)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.PersonInChargePhoneNumber, new { @class = "form-control", @required = "required" })
        </div>
        <div class="form-group">
            <label for="PersonInChargeEmailID">
                @Html.DisplayNameFor(model => model.PersonInChargeEmailID)
                <span class="text-danger">*</span>
            </label>
            @Html.TextBoxFor(model => model.PersonInChargeEmailID, new { @class = "form-control", id = "PersonInChargeEmailID", @required = "required" })
            <span id="errorPersonInCharge" style="color:red; display:none;">Please enter a valid email address.</span>
        </div>
        <div class="form-group">
            <label for="PersonInChargeRole">
                @Html.DisplayNameFor(model => model.PersonInChargeRole)
                <span class="text-danger">*</span>
            </label>
            @Html.DropDownListFor(model => model.PersonInChargeRole, new SelectList(new[]
            {
                new { Text = "Beverage professionals", Value = "266990000" },
                new { Text = "Culinary professionals", Value = "266990001" },
                new { Text = "Executive level", Value = "266990002" },
                new { Text = "Finance", Value = "266990003" },
                new { Text = "Operations", Value = "266990004" },
                new { Text = "Pastry professionals", Value = "266990005" },
                new { Text = "Purchase", Value = "266990006" },
                new { Text = "Sponsor", Value = "266990007" },
                new { Text = "Reference", Value = "0" },
                new { Text = "Owner", Value = "1" },
                new { Text = "Other", Value = "2" },
                new { Text = "Ecommerce", Value = "266990008" }
            }, "Value", "Text"), "Select Role", new { @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.PersonInChargeRole, "", new { @class = "text-danger" })
        </div>

    </div>

        <div class="form-group">
            @Html.LabelFor(m => m.IsContactPersonSameAsPurchasing)
            <span class="text-danger">*</span>
            @Html.DropDownListFor(m => m.IsContactPersonSameAsPurchasing,
                new List<SelectListItem> {
                  new SelectListItem{ Value = "1", Text = "Yes" },
                  new SelectListItem{ Value = "0", Text = "No" }
                }, "Select an option", new { @class = "form-control", id = "isContactSame" })
            @Html.ValidationMessageFor(m => m.IsContactPersonSameAsPurchasing)
        </div>
        <div id="purchasingFields">
            <div class="form-group">
                <label for="PurchasingPersonFirstName">
                    @Html.DisplayNameFor(model => model.PurchasingPersonFirstName)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.PurchasingPersonFirstName, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="PurchasingPersonLastName">
                    @Html.DisplayNameFor(model => model.PurchasingPersonLastName)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.PurchasingPersonLastName, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="PurchasingPersonPhoneNumber">
                    @Html.DisplayNameFor(model => model.PurchasingPersonPhoneNumber)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.PurchasingPersonPhoneNumber, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="PurchasingPersonEmailID">
                    @Html.DisplayNameFor(model => model.PurchasingPersonEmailID)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.PurchasingPersonEmailID, new { @class = "form-control", id = "PurchasingPersonEmailID" })
                <span id="errorPurchasingPerson" style="color:red; display:none;">Please enter a valid email address.</span>
            </div>
            <div class="form-group">
                <label for="PurchasingPersonRole">
                    @Html.DisplayNameFor(model => model.PurchasingPersonRole)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.PurchasingPersonRole, new SelectList(new[]
                {
                    new { Text = "Beverage professionals", Value = "266990000" },
                    new { Text = "Culinary professionals", Value = "266990001" },
                    new { Text = "Executive level", Value = "266990002" },
                    new { Text = "Finance", Value = "266990003" },
                    new { Text = "Operations", Value = "266990004" },
                    new { Text = "Pastry professionals", Value = "266990005" },
                    new { Text = "Purchase", Value = "266990006" },
                    new { Text = "Sponsor", Value = "266990007" },
                    new { Text = "Reference", Value = "0" },
                    new { Text = "Owner", Value = "1" },
                    new { Text = "Other", Value = "2" },
                    new { Text = "Ecommerce", Value = "266990008" }
                }, "Value", "Text"), "Select Role", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PurchasingPersonRole, "", new { @class = "text-danger" })
            </div>

        </div>


        <div class="form-group">
            @Html.LabelFor(m => m.IsContactPersonSameAsCompanyOwner)
            <span class="text-danger">*</span>
            @Html.DropDownListFor(m => m.IsContactPersonSameAsCompanyOwner,
                new List<SelectListItem> {
                     new SelectListItem{ Value = "1", Text = "Yes" },
                     new SelectListItem{ Value = "0", Text = "No" }
                }, "Select an option", new { @class = "form-control", id = "isCompanyOwnerSame" })
            @Html.ValidationMessageFor(m => m.IsContactPersonSameAsCompanyOwner)
        </div>
        <div id="CompanyOwnerFields">
            <div class="form-group">
                <label for="CompanyOwnerFirstName">
                    @Html.DisplayNameFor(model => model.CompanyOwnerFirstName)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.CompanyOwnerFirstName, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="CompanyOwnerLastName">
                    @Html.DisplayNameFor(model => model.CompanyOwnerLastName)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.CompanyOwnerLastName, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="CompanyOwnerPhoneNumber">
                    @Html.DisplayNameFor(model => model.CompanyOwnerPhoneNumber)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.CompanyOwnerPhoneNumber, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="CompanyOwnerEmailID">
                    @Html.DisplayNameFor(model => model.CompanyOwnerEmailID)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.CompanyOwnerEmailID, new { @class = "form-control", id = "CompanyOwnerEmailID" })
                <span id="errorCompanyOwner" style="color:red; display:none;">Please enter a valid email address.</span>
            </div>
            <div class="form-group">
                <label for="CompanyOwnerEmailID">
                    @Html.DisplayNameFor(model => model.CompanyOwnerRole)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.CompanyOwnerRole, new SelectList(new[]
                 {
                     new { Text = "Beverage professionals", Value = "266990000" },
                     new { Text = "Culinary professionals", Value = "266990001" },
                     new { Text = "Executive level", Value = "266990002" },
                     new { Text = "Finance", Value = "266990003" },
                     new { Text = "Operations", Value = "266990004" },
                     new { Text = "Pastry professionals", Value = "266990005" },
                     new { Text = "Purchase", Value = "266990006" },
                     new { Text = "Sponsor", Value = "266990007" },
                     new { Text = "Reference", Value = "0" },
                     new { Text = "Owner", Value = "1" },
                     new { Text = "Other", Value = "2" },
                     new { Text = "Ecommerce", Value = "266990008" }
                 }, "Value", "Text"), "Select Role", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CompanyOwnerRole, "", new { @class = "text-danger" })

            </div>
        </div>

    </div>

    <!-- Corporate Address (Finance) Section -->

    <div class="section-field">
        <div class="section-title">Corporate Address/Billing Address</div>
        <div id="corpAddressInformation">
            <div class="form-group">
                <label for="CorporateCustomerName">
                    @Html.DisplayNameFor(model => model.CorporateCustomerName)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.CorporateCustomerName, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
            </div>

            <div class="form-group">
                <label for="CorporateStreet">
                    @Html.DisplayNameFor(model => model.CorporateStreet)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.CorporateStreet, new { @class = "form-control", @required = true })
            </div>

            <div class="form-group">
                <label for="CorporateCountry">
                    @Html.DisplayNameFor(model => model.CorporateCountry)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.CorporateCountry, new SelectList(new[] { "United Arab Emirates",  "Turkmenistan",  "United Kingdom", "United States", "Tanzania","Vietnam","Saudi Arabia","Russia","Qatar","Netherlands","Nigeria","India","Italy",
"Japan","Malaysia","Kuwait","Pakistan","Paris"
    }), "Select Country", new { @class = "form-control", @required = true })
            </div>

            <div class="form-group">
                <label for="CorporateCity">
                    @Html.DisplayNameFor(model => model.CorporateCity)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.CorporateCity,
            new SelectList(new[] { "Al Barsha", "Brook", "Colombo", "Mumbai", "Beirut", "Tokyo", "Johor", "Gujarat", "Gujarat", "Ashgabat", "Brisbane", "Odisha", "Kristiansand", "Tashkent", "Mong Kok", "La Pierre Heuze", "Abu Dhabi", "Abu Dhabi", "Ho Chi Minh City", "Puravida Refreshments - Sole Proprietorship L.L.C.", "Tanjong Katong", "Neuvic", "Flora", "Negombo", "Ras Al Khaimah", "Nairobi", "Dubai", "Salalah", "Whakatane", "Nizwa", "United States", "Oxfordshire", "Ghayathi", "Riedstadt", "Saudi Arabia", "Kalba", "Loudes", "Salerno", "Tbilisa", "Sultanate Of Oman", "Praslin", "Sulaymaniyah", "Sohar", "Musandam", "Atlanta", "Paris", "Nile Road", "Ruwi", "Sharjah", "Ruwais", "Male", "Riga", "Goa", "Doha-Ind Area", "London", "Switzerland", "Duqm", "Italy", "Sana", "Umm Al Quwain", "Muscat", "Liwa Oasis", "Seeb", "Mahe", "Dhaid", "Hexham", "Pakistan", "Khor Fakkan", "Malaga", "Lagos", "Kolkatta", "Manama", "Dares Salaam", "Riyadh", "Jebel Ali", "Lahore", "Cimolais", "Hatta", "Icad", "Rabat", "Doha", "Dibba Al-Hisn", "Cheshire", "Seoul", "Denizli", "Fujairah", "Madinat Zayed", "Moscow", "Catalunya", "Alexandria", "Djibouti", "Barka", "Cedex", "Dibba", "Kuwait City", "Austria", "Amman", "Florida", "Al Khuwair", "Bausher", "Ar-Rams", "Baku", "Al Amerat", "Al Khoud", "Amsterdam", "Cyprus", "Belgium", "Abu Dhabi", "Ajman", "Alain", "Al Madam", "Riyadh", "Nizwa"
            }), "Select a City", new { @class = "form-control", @required = true })
            </div>

            <div class="form-group">
                <label for="CorporateShippingMethod">
                    @Html.DisplayNameFor(model => model.CorporateShippingMethod)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.CorporateShippingMethod,
                new List<SelectListItem>
                {
                    new SelectListItem { Value = "1", Text = "Air" },
                    new SelectListItem { Value = "3", Text = "Road" },
                    new SelectListItem { Value = "4", Text = "Sea" }
                },
        "Select Shipping Method", new { @class = "form-control", @required = true })
            </div>
        </div>
    </div>


    <!-- Delivery Address (Commercial) Section -->
    <div class="section-field">
        <div class="section-title">Delivery Address (Commercial)</div>
        <div id="deliveryAddressInformation">
            <div class="form-group">
                <label for="DeliveryCustomerName">
                    @Html.DisplayNameFor(model => model.DeliveryCustomerName)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.DeliveryCustomerName, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
            </div>

            <div class="form-group">
                <label for="DeliveryStreet">
                    @Html.DisplayNameFor(model => model.DeliveryStreet)
                    <span class="text-danger">*</span>
                </label>
                @Html.TextBoxFor(model => model.DeliveryStreet, new { @class = "form-control", @required = true })
            </div>

            <div class="form-group">
                <label for="DeliveryCountry">
                    @Html.DisplayNameFor(model => model.DeliveryCountry)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.DeliveryCountry, new SelectList(new[] { "United Arab Emirates",  "Turkmenistan",  "United Kingdom", "United States", "Tanzania","Vietnam","Saudi Arabia","Russia","Qatar","Netherlands","Nigeria","India","Italy",
"Japan","Malaysia","Kuwait","Pakistan","Paris"
    }), "Select Country", new { @class = "form-control", @required = true })
            </div>

            <div class="form-group">
                <label for="DeliveryCity">
                    @Html.DisplayNameFor(model => model.DeliveryCity)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.DeliveryCity,
            new SelectList(new[] {  "Al Barsha", "Brook", "Colombo", "Mumbai", "Beirut", "Tokyo", "Johor", "Gujarat", "Gujarat", "Ashgabat", "Brisbane", "Odisha", "Kristiansand", "Tashkent", "Mong Kok", "La Pierre Heuze", "Abu Dhabi", "Abu Dhabi", "Ho Chi Minh City", "Puravida Refreshments - Sole Proprietorship L.L.C.", "Tanjong Katong", "Neuvic", "Flora", "Negombo", "Ras Al Khaimah", "Nairobi", "Dubai", "Salalah", "Whakatane", "Nizwa", "United States", "Oxfordshire", "Ghayathi", "Riedstadt", "Saudi Arabia", "Kalba", "Loudes", "Salerno", "Tbilisa", "Sultanate Of Oman", "Praslin", "Sulaymaniyah", "Sohar", "Musandam", "Atlanta", "Paris", "Nile Road", "Ruwi", "Sharjah", "Ruwais", "Male", "Riga", "Goa", "Doha-Ind Area", "London", "Switzerland", "Duqm", "Italy", "Sana", "Umm Al Quwain", "Muscat", "Liwa Oasis", "Seeb", "Mahe", "Dhaid", "Hexham", "Pakistan", "Khor Fakkan", "Malaga", "Lagos", "Kolkatta", "Manama", "Dares Salaam", "Riyadh", "Jebel Ali", "Lahore", "Cimolais", "Hatta", "Icad", "Rabat", "Doha", "Dibba Al-Hisn", "Cheshire", "Seoul", "Denizli", "Fujairah", "Madinat Zayed", "Moscow", "Catalunya", "Alexandria", "Djibouti", "Barka", "Cedex", "Dibba", "Kuwait City", "Austria", "Amman", "Florida", "Al Khuwair", "Bausher", "Ar-Rams", "Baku", "Al Amerat", "Al Khoud", "Amsterdam", "Cyprus", "Belgium", "Abu Dhabi", "Ajman", "Alain", "Al Madam", "Riyadh", "Nizwa"
            }), "Select a City", new { @class = "form-control", @required = true })
            </div>

            <div class="form-group">
                <label for="DeliveryShippingMethod">
                    @Html.DisplayNameFor(model => model.DeliveryShippingMethod)
                    <span class="text-danger">*</span>
                </label>
                @Html.DropDownListFor(model => model.DeliveryShippingMethod,
                new List<SelectListItem> {
                new SelectListItem{ Value = "1", Text = "Air" },
                new SelectListItem{ Value = "100000001", Text = "Road" },
                new SelectListItem { Value = "100000002", Text = "Sea" },
                },
               "Select Shipping Method", new { @class = "form-control", @required = true })
            </div>

        </div>
    </div>


    <!-- Registered Address Section -->
    <div class="section-field">
        <div class="section-title">Registered Address</div>

        <div class="form-group">
            @Html.LabelFor(m => m.IsSameAsCorporateAddress)
            @Html.DropDownListFor(m => m.IsSameAsCorporateAddress,
                  new List<SelectListItem> {
                   new SelectListItem{ Value = "1", Text = "Yes" },
                   new SelectListItem{ Value = "0", Text = "No",Selected=true }
            }, "Select an option", new { @class = "form-control", id = "isCorporateAddressSame", @required = "required" })
            @Html.ValidationMessageFor(m => m.IsSameAsCorporateAddress)
        </div>
        <div id="RegisteredAddress">
            <div class="form-group">
                @Html.LabelFor(model => model.RegisteredCustomerName)
                @Html.TextBoxFor(model => model.RegisteredCustomerName, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RegisteredStreet)
                @Html.TextBoxFor(model => model.RegisteredStreet, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RegisteredCountry)
                @Html.DropDownListFor(model => model.RegisteredCountry, new SelectList(new[] { "United Arab Emirates",  "Turkmenistan",  "United Kingdom", "United States", "Tanzania","Vietnam","Saudi Arabia","Russia","Qatar","Netherlands","Nigeria","India","Italy",
"Japan","Malaysia","Kuwait","Pakistan","Paris"
}), "Select Country", new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RegisteredCity)
                @Html.DropDownListFor(model => model.RegisteredCity,
        new SelectList(new[] { "Al Barsha", "Brook", "Colombo", "Mumbai", "Beirut", "Tokyo", "Johor", "Gujarat", "Gujarat", "Ashgabat", "Brisbane", "Odisha", "Kristiansand", "Tashkent", "Mong Kok", "La Pierre Heuze", "Abu Dhabi", "Abu Dhabi", "Ho Chi Minh City", "Puravida Refreshments - Sole Proprietorship L.L.C.", "Tanjong Katong", "Neuvic", "Flora", "Negombo", "Ras Al Khaimah", "Nairobi", "Dubai", "Salalah", "Whakatane", "Nizwa", "United States", "Oxfordshire", "Ghayathi", "Riedstadt", "Saudi Arabia", "Kalba", "Loudes", "Salerno", "Tbilisa", "Sultanate Of Oman", "Praslin", "Sulaymaniyah", "Sohar", "Musandam", "Atlanta", "Paris", "Nile Road", "Ruwi", "Sharjah", "Ruwais", "Male", "Riga", "Goa", "Doha-Ind Area", "London", "Switzerland", "Duqm", "Italy", "Sana", "Umm Al Quwain", "Muscat", "Liwa Oasis", "Seeb", "Mahe", "Dhaid", "Hexham", "Pakistan", "Khor Fakkan", "Malaga", "Lagos", "Kolkatta", "Manama", "Dares Salaam", "Riyadh", "Jebel Ali", "Lahore", "Cimolais", "Hatta", "Icad", "Rabat", "Doha", "Dibba Al-Hisn", "Cheshire", "Seoul", "Denizli", "Fujairah", "Madinat Zayed", "Moscow", "Catalunya", "Alexandria", "Djibouti", "Barka", "Cedex", "Dibba", "Kuwait City", "Austria", "Amman", "Florida", "Al Khuwair", "Bausher", "Ar-Rams", "Baku", "Al Amerat", "Al Khoud", "Amsterdam", "Cyprus", "Belgium", "Abu Dhabi", "Ajman", "Alain", "Al Madam", "Riyadh", "Nizwa"
        }), "Select a City", new { @class = "form-control" })
            </div>
        </div>

    </div>

    <!-- Additional Fields Section -->
    <div class="section-field">
        <div class="section-title">Additional Fields</div>

        <div class="form-group">
            @Html.LabelFor(model => model.StatisticGroup)
            @Html.TextBoxFor(model => model.StatisticGroup, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChefSegment)
            @Html.TextBoxFor(model => model.ChefSegment, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SubSegment)
            @Html.TextBoxFor(model => model.SubSegment, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Classification)
            @Html.TextBoxFor(model => model.Classification, new { @class = "form-control", @readonly = isReadOnly ? "readonly" : null })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentTerms)
            @Html.TextBoxFor(model => model.PaymentTerms, new { @class = "form-control", @readonly = "readonly", id = "PaymentTerms" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProposedPaymentTerms)
            @Html.TextBoxFor(model => model.ProposedPaymentTerms, new { @class = "form-control" })
        </div>

        <div class="form-group">
            <label>
                @Html.CheckBoxFor(model => model.CreditLimit, new { @id = "CreditLimitChecked" }) Credit Limit
            </label>
        </div>

        <div id="CreditLimit">
            <div class="form-group">
                @Html.LabelFor(model => model.RequestedCreditLimit)
                <span id="requestedCreditLimitRequired" class="text-danger" style="display: none;">*</span>
                @Html.TextBoxFor(model => model.RequestedCreditLimit, new { @class = "form-control", type = "number" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EstimatedPurchaseValue)
            <span id="estimatedPurchaseValueRequired" class="text-danger" style="display: none;">*</span>
            @Html.TextBoxFor(model => model.EstimatedPurchaseValue, new { @class = "form-control", @id= "EstimatedPurchaseValue", type = "number" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EstimatedMonthlyPurchase)
            <span id="estimatedMonthlyPurchaseRequired" class="text-danger" style="display: none;">*</span>
            @Html.TextBoxFor(model => model.EstimatedMonthlyPurchase, new { @class = "form-control", type = "number" })
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.SecurityChequeAmount)
            @Html.TextBoxFor(model => model.SecurityChequeAmount, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChequeCopy)
            @if (Model.ChequeCopyFileData != null && Model.ChequeCopyFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.ChequeCopyFileData)"
                       download="@Model.ChequeCopyFileName">
                        @Model.ChequeCopyFileName
                    </a>
                </p>
            }
            <input type="file" name="ChequeCopy" id="ChequeCopy" class="form-control" /><p id="chequecopyfileSizeDisplay"></p>
        </div>
        <div id="qatFields" style="display:none;">
            <div class="form-group">
                @Html.LabelFor(model => model.EstablishmentCardNumber)
                @Html.TextBoxFor(model => model.EstablishmentCardNumber, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EstablishmentCardCopy)
                @if (Model.EstablishmentCardFileData != null && Model.EstablishmentCardFileData.Length > 0)
                {
                    <p>
                        Existing File:
                        <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.EstablishmentCardFileData)"
                           download="@Model.EstablishmentCardFileName">
                            @Model.EstablishmentCardFileName
                        </a>
                    </p>
                }
                <input type="file" name="EstablishmentCardCopy" id="EstablishmentCardCopy" class="form-control" />
                <p id="establishmentcardcopyfileSizeDisplay"></p>
            </div>
        </div>

    </div>

    <!---Bank Details --->
    <div class="section-field">
        <div class="section-title">Bank Details</div>

        <div class="form-group">
            @Html.LabelFor(model => model.IBNAccountNumber)
            @Html.TextBoxFor(model => model.IBNAccountNumber, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bank)
            @Html.TextBoxFor(model => model.Bank, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BankName)
            @Html.TextBoxFor(model => model.BankName, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BankAddress)
            @Html.TextBoxFor(model => model.BankAddress, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SwiftCode)
            @Html.TextBoxFor(model => model.SwiftCode, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IbanNumber)
            @Html.TextBoxFor(model => model.IbanNumber, new { @class = "form-control" })
        </div>
        @*<div class="form-group">
                @Html.LabelFor(model => model.StatusCode)
                @Html.TextBoxFor(model => model.StatusCode, new { @class = "form-control", @readonly = "readonly" })
            </div>*@
    </div>

    <!-- Attachments Section -->
    <div class="section-field">
        <div class="section-title">Attachments</div>


        <div class="form-group">
            @Html.LabelFor(model => model.POA)
            <span id="poaRequired" class="text-danger" style="display: none;">*</span>
            @if (Model.POAFileData != null && Model.POAFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.POAFileData)"
                       download="@Model.POAFileName">
                        @Model.POAFileName
                    </a>
                </p>
            }
            <input type="file" name="POA" id="POA" class="form-control"  /><p id="fileSizeDisplay"></p>
        </div>

    </div>


    <!-- Attachments Section -->
    <div class="section-field">
        <div class="section-title">Attachments(Personal Documents)</div>
        <div class="form-group">
            <label for="Passport">
                @Html.DisplayNameFor(model => model.Passport)
                <span class="text-danger">*</span>
            </label>
            @if (Model.PassportFileData != null && Model.PassportFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.PassportFileData)"
                       download="@Model.PassportFileName">
                        @Model.PassportFileName
                    </a>
                </p>
            }
            <input type="file" id="Passport" name="Passport" class="form-control" />
            <p id="passportfileSizeDisplay"></p>
        </div>

        <div class="form-group">
            <label for="Visa">
                @Html.DisplayNameFor(model => model.Visa)
                <span class="text-danger">*</span>
            </label>
            @if (Model.VisaFileData != null && Model.VisaFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.VisaFileData)"
                       download="@Model.VisaFileName">
                        @Model.VisaFileName
                    </a>
                </p>
            }
            <input type="file" id="Visa" name="Visa" class="form-control" />
            <p id="visafileSizeDisplay"></p>
        </div>

        <div class="form-group">
            <label for="EID">
                @Html.DisplayNameFor(model => model.EID)
                <span class="text-danger">*</span>
            </label>
            @if (Model.EIDFileData != null && Model.EIDFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.EIDFileData)"
                       download="@Model.EIDFileName">
                        @Model.EIDFileName
                    </a>
                </p>
            }
            <input type="file" id="EID" name="EID" class="form-control" />
            <p id="eidfileSizeDisplay"></p>
        </div>

        @if (Model.StatusCode == "920750001")
        {
            <div class="mt-4">
                <p class="text-danger"><strong>Note:</strong> The option will be available once all mandatory fields and attachments are provided.</p>

                <button type="button" id="generatePdfButton" class="btn btn-success generate-btn">Generate Account Opening File</button>
            </div>
        }

        <p class="text-danger"><strong>Note:</strong> The Account opening file application should be signed and stamped on all pages before upload.</p>

        <div class="form-group">
            @Html.LabelFor(model => model.AccountOpeningFile)
            @if (Model.AccountOpeningFileData != null && Model.AccountOpeningFileData.Length > 0)
            {
                <p>
                    Existing File:
                    <a href="data:application/octet-stream;base64,@Convert.ToBase64String(Model.AccountOpeningFileData)"
                       download="@Model.AccountOpeningFileName">
                        @Model.AccountOpeningFileName
                    </a>
                </p>
            }
            <input type="file" name="AccountOpeningFile" id="AccountOpeningFile" class="form-control" />
            <p id="accountopeningfilefileSizeDisplay"></p>
        </div>
    </div>

    <div class="mt-4 text-danger" id="divWarnings">

    </div>

    if (@Model.StatusCode == "920750001")
    {
    <button type="submit" name="action" value="Save" class="btn btn-primary Save-btn" id="SaveBtn" onclick="return checkMandatoryFields();">
        Save and Continue later
        <span>
            <svg data-v-3ce6e198="" focusable="false" preserveAspectRatio="xMidYMid meet"
                 xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 20 20"
                 aria-hidden="true" class="arrow-right-icon" data-v-63b7e602="">
                <path d="M11.8 2.8L10.8 3.8 16.2 9.3 1 9.3 1 10.7 16.2 10.7 10.8 16.2 11.8 17.2 19 10z"></path>
            </svg>
        </span>
    </button>
    }
    <!-- Note for Save button -->
    <p class="text-danger">
        <strong>Note:</strong> The application will be available for up to 48 hours after saving.
    </p>

    if (@Model.StatusCode == "920750001")
    {

    <!-- Submit Button -->
    <button type="submit" name="action" value="Submit" class="btn btn-primary submit-btn" id="SubmitBtn">Submit <span><svg data-v-3ce6e198="" focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 20 20" aria-hidden="true" class="arrow-right-icon" data-v-63b7e602=""><path d="M11.8 2.8L10.8 3.8 16.2 9.3 1 9.3 1 10.7 16.2 10.7 10.8 16.2 11.8 17.2 19 10z"></path></svg></span></button>
    }
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        $(document).ready(function () {

            

            $('#POA').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('fileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) {
                        document.getElementById('fileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#fileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#fileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('fileSizeDisplay').textContent = '';
                    
                }
            });

            $('#TradeLicense').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('tradeLicensefileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) {
                        document.getElementById('tradeLicensefileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#tradeLicensefileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#tradeLicensefileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('tradeLicensefileSizeDisplay').textContent = '';
                }
            });

            $('#VatCertificate').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('vatcertificatefileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) { 
                        document.getElementById('vatcertificatefileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#vatcertificatefileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#vatcertificatefileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('vatcertificatefileSizeDisplay').textContent = '';
                }
            });

            $('#ChequeCopy').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('chequecopyfileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) { 
                        document.getElementById('chequecopyfileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#chequecopyfileSizeDisplay').css('color', 'red');
                }
                else {
                        $('#chequecopyfileSizeDisplay').css('color', 'green');
                }
                } else {
                    document.getElementById('chequecopyfileSizeDisplay').textContent = '';
                }
            });

            $('#EstablishmentCardCopy').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('establishmentcardcopyfileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) {
                        document.getElementById('establishmentcardcopyfileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`; $('#establishmentcardcopyfileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#establishmentcardcopyfileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('establishmentcardcopyfileSizeDisplay').textContent = '';
                }
            });

            $('#Passport').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('passportfileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) { 
                        document.getElementById('passportfileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`; $('#passportfileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#passportfileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('passportfileSizeDisplay').textContent = '';
                }
            });

            $('#Visa').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('visafileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) { 
                        document.getElementById('visafileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#visafileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#visafileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('visafileSizeDisplay').textContent = '';
                }
            });

            $('#EID').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('eidfileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) { 
                        document.getElementById('eidfileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#eidfileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#eidfileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('eidfileSizeDisplay').textContent = '';
                }
            });

            $('#AccountOpeningFile').change(function () {
                var file = this.files[0];
                if (file) {
                    var sizeInKB = (file.size / 1024).toFixed(2);
                    var sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    var display = file.size > 1024 * 1024
                        ? `${sizeInMB} MB`
                        : `${sizeInKB} KB`;
                    document.getElementById('accountopeningfilefileSizeDisplay').textContent = `File size: ${display}`;
                    if (sizeInMB > 10) { 
                        document.getElementById('accountopeningfilefileSizeDisplay').textContent = `File size: ${display}. Please select file size below 10 MB`;
                        $('#accountopeningfilefileSizeDisplay').css('color', 'red');
                    }
                    else {
                        $('#accountopeningfilefileSizeDisplay').css('color', 'green');
                    }
                } else {
                    document.getElementById('accountopeningfilefileSizeDisplay').textContent = '';
                }
            });


            function togglePurchasingFields() {
                if ($('#isContactSame').val() === "1") {
                    $('#purchasingFields')
                        .hide()
                        .find('input, select, textarea').prop('required', false).val('');
                } else {
                    $('#purchasingFields')
                        .show()
                        .find('input, select, textarea').prop('required', true);
                }
            }
            $('#isContactSame').change(togglePurchasingFields);

            function toggleCompanyOwnerFields() {
                if ($('#isCompanyOwnerSame').val() === "1") {
                    $('#CompanyOwnerFields').hide().find('input, select, textarea').prop('required', false).val('');
                    $('#poaRequired').hide();
                } else {
                    $('#CompanyOwnerFields').show().find('input, select, textarea').prop('required', true);
                    $('#poaRequired').show();
                }
            }
            $('#isCompanyOwnerSame').change(toggleCompanyOwnerFields);
            function toggleRegisteredAddressFields() {
                if ($('#isCorporateAddressSame').val() === "1") {
                    $('#RegisteredAddress').hide().hide().find('input, select, textarea').prop('required', false).val('');
                } else {
                    $('#RegisteredAddress').show().find('input, select, textarea').prop('required', true);
                }
            }
            $('#isCorporateAddressSame').change(toggleRegisteredAddressFields);
            function toggleCreditLimitFieldsOnLoad() {
                if ($('#CreditLimitChecked').prop('checked')) {
                    // ✅ Show Credit Limit section
                    $('#CreditLimit').show();

                    // ✅ Mark fields as required & show `*`
                    $('#RequestedCreditLimit').prop('required', true);
                    $('#EstimatedPurchaseValue').prop('required', true);
                    $('#EstimatedMonthlyPurchase').prop('required', true);

                    $('#requestedCreditLimitRequired').show();
                    $('#estimatedPurchaseValueRequired').show();
                    $('#estimatedMonthlyPurchaseRequired').show();
                } else {
                    // ❌ Hide Credit Limit section
                    $('#CreditLimit').hide();

                    $('#requestedCreditLimitRequired').hide();
                    $('#estimatedPurchaseValueRequired').hide();
                    $('#estimatedMonthlyPurchaseRequired').hide();
                }
            }

            function toggleCreditLimitFields() {
                if ($('#CreditLimitChecked').prop('checked')) {
                    // ✅ Show Credit Limit section
                    $('#CreditLimit').show();

                    // ✅ Mark fields as required & show `*`
                    $('#RequestedCreditLimit').prop('required', true);
                    $('#EstimatedPurchaseValue').prop('required', true);
                    $('#EstimatedMonthlyPurchase').prop('required', true);

                    $('#requestedCreditLimitRequired').show();
                    $('#estimatedPurchaseValueRequired').show();
                    $('#estimatedMonthlyPurchaseRequired').show();
                } else {
                    // ❌ Hide Credit Limit section
                    $('#CreditLimit').hide();
                    debugger;
                    // ❌ Remove required attribute & hide `*`
                    $('#RequestedCreditLimit').prop('required', false).val('');
                    $('#EstimatedPurchaseValue').prop('required', false).val('');
                    $('#EstimatedMonthlyPurchase').prop('required', false).val('');

                    $('#requestedCreditLimitRequired').hide();
                    $('#estimatedPurchaseValueRequired').hide();
                    $('#estimatedMonthlyPurchaseRequired').hide();
                }
            }

            // ✅ Run function on checkbox change
            $('#CreditLimitChecked').change(toggleCreditLimitFields);

            // ✅ Run function on page load to set correct state (for edit forms)
            toggleCreditLimitFieldsOnLoad();


            function toggleQATFields() {
                var branchVal = document.getElementById("branchField").value.trim().toUpperCase();
                var qatFields = document.getElementById("qatFields");

                if (branchVal === "QAT") {
                    qatFields.style.display = "block";
                } else {
                    qatFields.style.display = "none";
                }
            }

            document.addEventListener("DOMContentLoaded", function () {
                toggleQATFields(); // Check on load

                const branchField = document.getElementById("branchField");
                if (branchField) {
                    branchField.addEventListener("input", toggleQATFields);
                    branchField.addEventListener("change", toggleQATFields);
                }
            });

            function updatePaymentTerms() {
                let selectedPaymentMethod = $("#CustomerPaymentMethod").val();

                if (selectedPaymentMethod === "Cheque" || selectedPaymentMethod === "Transfer") {
                    $("#PaymentTerms").val("21 Days EOM"); // ✅ Set value for Cheque/Credit
                } else {
                    $("#PaymentTerms").val(""); // ❌ Clear value for other methods
                }
            }

            $("#CustomerPaymentMethod").change(updatePaymentTerms);

            function fileSizesValid2() {
                debugger;
                var result = true;
                var currentColor = $('#fileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;

                currentColor = $('#accountopeningfilefileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#eidfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#visafileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#passportfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#establishmentcardcopyfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#chequecopyfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
            }

            function checkRequiredFiles() {
                var passport = $('#Passport').get(0).files.length > 0 || '@(Model.PassportFileData != null && Model.PassportFileData.Length > 0 ? "true" : "false")' === "true";
                var visa = $('#Visa').get(0).files.length > 0 || '@(Model.VisaFileData != null && Model.VisaFileData.Length > 0 ? "true" : "false")' === "true";
                var eid = $('#EID').get(0).files.length > 0 || '@(Model.EIDFileData != null && Model.EIDFileData.Length > 0 ? "true" : "false")' === "true";
                var accountOpeningFile = $('#AccountOpeningFile').get(0).files.length > 0 || '@(Model.AccountOpeningFileData != null && Model.AccountOpeningFileData.Length > 0 ? "true" : "false")' === "true";

                var allFilesizesAreValid = fileSizesValid2();
                //alert(allFilesizesAreValid);

                if (allFilesizesAreValid == false) {
                    $("#divWarnings").append("<br/>⚠️ File size should be less than 10MB:");
                }

                if (passport && visa && eid && accountOpeningFile) {
                    $('#SubmitBtn').prop('disabled', false);
                    //$('#SaveBtn').prop('disabled', false);
                } else {
                    $('#SubmitBtn').prop('disabled', true);
                    //$('#SaveBtn').prop('disabled', true);
                }
            }

            // Run check on file input change
            $('#Passport, #Visa, #EID, #AccountOpeningFile').change(checkRequiredFiles);

                    function validateEmailInput(inputId, errorMessageId) {
                    var email = document.getElementById(inputId).value;
                        var emailPattern = /^[a-zA-Z0-9._%+-]+(?:\u0040)[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                    var errorMessage = document.getElementById(errorMessageId);

                    // Validate email format
                    if (!emailPattern.test(email)) {
                        errorMessage.style.display = 'block'; // Show error message
                    } else {
                        errorMessage.style.display = 'none'; // Hide error message
                    }
            }
            $('#PersonInChargeEmailID').on('input', function () {
                validateEmailInput('PersonInChargeEmailID', 'errorPersonInCharge');
            });
            $('#CompanyOwnerEmailID').on('input', function () {
                validateEmailInput('CompanyOwnerEmailID', 'errorCompanyOwner');
            });
            $('#PurchasingPersonEmailID').on('input', function () {
                validateEmailInput('PurchasingPersonEmailID', 'errorPurchasingPerson');
            });

            checkRequiredFiles();
            updatePaymentTerms();
            toggleQATFields();
            togglePurchasingFields();
            toggleCompanyOwnerFields();
            toggleRegisteredAddressFields();

            let leadId = new URLSearchParams(window.location.search).get("leadId");
            if (leadId) {
                $.ajax({
                    url: "/Form/GetLeadData",
                    type: "GET",
                    data: { leadId: leadId },
                    success: function (data) {

                        $('#StatisticGroup').val(data.StatisticGroup);
                        $('#ChefSegment').val(data.ChefSegment);
                        $('#SubSegment').val(data.SubSegment);
                    }
                });
            }
        });
            $(document).ready(function () {
                $("#generatePdfButton").click(function () {
                    var formData = new FormData($("#customerForm")[0]);

                    // Debug: Log all form data being sent
                    for (var pair of formData.entries()) {
                        console.log(pair[0] + ": " + pair[1]);
                    }

                     //Disable button and show spinner
                    var $button = $(this);
                    $button.prop("disabled", true).html('<i class="fa fa-spinner fa-spin"></i> Generating Account Opening File...');

                    $.ajax({
                        url: "/Form/GeneratePdfBeforeSubmit",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        xhrFields: { responseType: 'blob' },
                        success: function (data) {
                            var blob = new Blob([data], { type: "application/pdf" });
                            var link = document.createElement("a");
                            link.href = window.URL.createObjectURL(blob);
                            link.download = "AccountOpeningForm.pdf";
                            link.click();
                        },
                        error: function (xhr, status, error) {
                            alert("Error generating PDF: " + xhr.responseText);
                        },
                        complete: function () {
                            // Re-enable button and reset text after completion
                            $button.prop("disabled", false).html('Generate Account Opening File');
                        }
                    });
                });
            });

    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Mapping of countries to their cities
            const countryCityMap = {
                "United Arab Emirates": ["AR-RAMS", "HATTA", "DUBAI", "UMM AL QUWAIN", "DIBBA AL-HISN", "DHAID", "GHAYATHI", "RAS AL KHAIMAH", "FUJAIRAH", "LIWA OASIS", "JEBEL ALI", "KALBA", "ICAD", "AJMAN", "MADINAT ZAYED", "ALAIN", "KHOR FAKKAN", "RUWAIS", "ABU DHABI", "SHARJAH", "DIBBA", "AL MADAM"],
                "Turkmenistan": ["Ashgabat"],
                "United Kingdom": ["London", "CW48AB  Cheshire", "Hexham"],
                "United States": ["UNITED STATES", "ATLANTA", "FLORIDA"],
                "Tanzania": ["DARES SALAAM"],
                "Vietnam": ["H oChi Minh City"],
                "Saudi Arabia": ["Riyadh", "SAUDI ARABIA"],
                "Russia": ["Moscow"],
                "Qatar": ["Doha", "Doha Ind Area"],
                "Netherlands": ["Amsterdam", "BELGIUM"],
                "Nigeria": ["Lagos"],
                "India": ["Odisha", "GOA", "Kolkatta", "Mumbai", "Gujarat"],
                "Italy": ["Italy", "Salerno", "CIMOLOAIS"],
                "Japan": ["Tokyo"],
                "Malaysia": ["Johor"],
                "Kuwait": ["Kuwait City"],
                "Pakistan": ["Lahore", "PAKISTAN"],
                "Paris": ["Loudes", "Cedex", "Neuvic", "La Pierre Heuze", "Paris"]
            };

            // Function to update city dropdown based on selected country
            function updateCityDropdown(countryDropdown, cityDropdown) {
                const selectedCountry = $(countryDropdown).val();
                const cityDropdownElement = $(cityDropdown);

                cityDropdownElement.empty().append('<option value="">Select a City</option>');

                if (selectedCountry && countryCityMap[selectedCountry]) {
                    countryCityMap[selectedCountry].forEach(function (city) {
                        cityDropdownElement.append($('<option></option>').val(city).text(city));
                    });
                }
            }

            // Event listeners for country selection
            $("#CorporateCountry").change(function () {
                updateCityDropdown("#CorporateCountry", "#CorporateCity");
            });

            $("#DeliveryCountry").change(function () {
                updateCityDropdown("#DeliveryCountry", "#DeliveryCity");
            });

            $("#RegisteredCountry").change(function () {
                updateCityDropdown("#RegisteredCountry", "#RegisteredCity");
            });
        });

        $(document).ready(function () {
            const $generatePdfButton = $("#generatePdfButton");
            const $saveButton = $("#SaveBtn");
            const $submitButton = $("#SubmitBtn");

            $("#divWarnings").html("");
            // Dropdown elements
            const $isCorporateAddressSame = $("#isCorporateAddressSame");
            const $isContactSameAsPurchasing = $("#isContactSameAsPurchasing");
            const $isContactSameAsCompanyOwner = $("#isContactSameAsCompanyOwner");

            const $isCompanyOwnerSame = $("#isCompanyOwnerSame");
            const $isContactSame = $("#isContactSame");

            // Sections to show/hide
            const $companyInformation = $("#CompanyInformation");
            const $inchargeInformation = $("#InchargeInformation");
            

            const $purchasingFields = $("#purchasingFields");
            const $companyOwnerFields = $("#CompanyOwnerFields");
            const $registeredAddress = $("#RegisteredAddress");
            const $licenseExpiryDate = $("#LicenseExpiry");
            const $corporateAddressInformation = $("#corpAddressInformation");
            const $deliveryAddressInformation = $("#deliveryAddressInformation");

            
            // Required fields
            const $companyInformationRequiredFields = $companyInformation.find("input, select, textarea");
            const $inchargeInformationRequiredFields = $inchargeInformation.find("input, select, textarea");
            const $corporateAddressRequiredFields = $corporateAddressInformation.find("input, select, textarea");
            const $deliveryAddressRequiredFields = $deliveryAddressInformation.find("input, select, textarea");
            const $registeredRequiredFields = $registeredAddress.find("input, select, textarea");
            const $purchasingRequiredFields = $purchasingFields.find("input, select, textarea");
            const $companyOwnerRequiredFields = $companyOwnerFields.find("input, select, textarea");
            const $companyOwnerSameRequiredField = $(".form-group").find("select#isCompanyOwnerSame");
            $companyOwnerSameRequiredField.prop("required", true);

            function fileSizesValid() {
               
                var result = true;
                var currentColor = $('#fileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;

                currentColor = $('#accountopeningfilefileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#eidfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#visafileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#passportfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#establishmentcardcopyfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
                currentColor = $('#chequecopyfileSizeDisplay').css('color');
                if (currentColor == 'rgb(255, 0, 0)')
                    return false;
            }
            // Function to check if all required fields are filled
            function checkMandatoryFields() {
                let allFilled = true;

                var filesValid = fileSizesValid();
                if (filesValid == false) {
                    $("#divWarnings").append("<br/>⚠️ File size should be less than 10MB:");
                    return filesValid;
                }

                function validateFields($fields) {
                    return $fields
                        .filter("[required]:visible")
                        .toArray()
                        .every(field => {
                            //let isFilled = $(field).val().trim() !== "";
                            const $field = $(field);
                            let isFilled = true;

                            if ($field.is("select")) {
                                isFilled = $field.val() !== "";
                            } else {
                                isFilled = $field.val().trim() !== "";
                            }
                            if (!isFilled) {
                                $("#divWarnings").append("<br/>⚠️ Missing Field:" + field.name || field.id);
                                console.log("⚠️ Missing Field:", field.name || field.id);
                            }
                            return isFilled;
                        });
                }

                $("#divWarnings").html("");
                // ✅ Ignore validation for hidden sections
                const companyInformationValid = !$companyInformation.is(":visible") || validateFields($companyInformationRequiredFields);
                const inchargeInformationValid = !$inchargeInformation.is(":visible") || validateFields($inchargeInformationRequiredFields);
                const purchasingValid = !$purchasingFields.is(":visible") || validateFields($purchasingRequiredFields);
                const companyOwnerValid = !$companyOwnerFields.is(":visible") || validateFields($companyOwnerRequiredFields);
                const companyOwnerSameValid = !$companyOwnerSameRequiredField.is(":visible") || validateFields($companyOwnerSameRequiredField);
                const corpAddressValid = !$corporateAddressInformation.is(":visible") || validateFields($corporateAddressRequiredFields);
                const deliveryAddressValid = !$deliveryAddressInformation.is(":visible") || validateFields($deliveryAddressRequiredFields);

                const registeredValid = !$registeredAddress.is(":visible") || validateFields($registeredRequiredFields);
                const licenseValid = !$licenseExpiryDate.is(":visible") || $licenseExpiryDate.val().trim() !== "";

                if (!registeredValid || !purchasingValid || !companyOwnerValid || !licenseValid || !companyInformationValid || !inchargeInformationValid || !corpAddressValid || !deliveryAddressValid) {
                    allFilled = false;
                }

                console.log("🔎 Validation Result:", allFilled ? "✅ All Required Fields Filled" : "❌ Some Fields Missing");
                
                if (allFilled == false) {
                    //$saveButton.prop("disabled", !allFilled);
                    $submitButton.prop("disabled", !allFilled);
                }
                checkGeneratePdfButton(allFilled); // Check both fields & files before enabling button
                return allFilled;
            }

            // Function to check if required files are uploaded
            function checkGeneratePdfButton(fieldsValid) {
                let passport = $('#Passport').get(0).files.length > 0 || '@(Model.PassportFileData != null && Model.PassportFileData.Length > 0 ? "true" : "false")' === "true";
                let visa = $('#Visa').get(0).files.length > 0 || '@(Model.VisaFileData != null && Model.VisaFileData.Length > 0 ? "true" : "false")' === "true";
                let eid = $('#EID').get(0).files.length > 0 || '@(Model.EIDFileData != null && Model.EIDFileData.Length > 0 ? "true" : "false")' === "true";

                let allFilesUploaded = passport && visa && eid;

                console.log("📂 File Validation:", allFilesUploaded ? "✅ All Files Uploaded" : "❌ Missing Required Files");

                // Enable the Generate PDF button only if both conditions are met
                $generatePdfButton.prop("disabled", !(fieldsValid && allFilesUploaded));
            }

            // Function to handle dropdown changes and show/hide fields
            function toggleFields($dropdown, $section, $fields) {
                if ($dropdown.val() === "1") {
                    $section.hide();
                    $fields.each(function () {
                        $(this).removeAttr("required").val(""); // ✅ Clear values
                    });
                    console.log(`ℹ️ ${$dropdown.attr("id")} set to Yes - Hiding ${$section.attr("id")}`);
                } else {
                    $section.show();
                    $fields.each(function () {
                        $(this).attr("required", "required");
                    });
                    console.log(`ℹ️ ${$dropdown.attr("id")} set to No - Showing ${$section.attr("id")}`);
                }
                checkMandatoryFields();
            }

            // Handle dropdown changes
            $isCorporateAddressSame.change(function () {
                toggleFields($isCorporateAddressSame, $registeredAddress, $registeredRequiredFields);
            });

            $isContactSameAsPurchasing.change(function () {
                toggleFields($isContactSameAsPurchasing, $purchasingFields, $purchasingRequiredFields);
            });

            $isContactSameAsCompanyOwner.change(function () {
                toggleFields($isContactSameAsCompanyOwner, $companyOwnerFields, $companyOwnerRequiredFields);
            });

            $isCompanyOwnerSame.change(function () {
                toggleFields($isCompanyOwnerSame, $companyOwnerFields, $companyOwnerRequiredFields);
            });

            $isContactSame.change(function () {
                toggleFields($isContactSame, $purchasingFields, $purchasingRequiredFields);
            });

            // ✅ Attach event listeners for real-time validation
            $registeredRequiredFields
                .add($purchasingRequiredFields)
                .add($companyOwnerRequiredFields)
                .on("input change", checkMandatoryFields);

            // ✅ Attach event listeners for file inputs
            $('#Passport, #Visa, #EID').change(() => checkGeneratePdfButton(true));

            // ✅ Run validation on page load
            checkMandatoryFields();
});




        // pre fill  phone number based on branch

        $(document).ready(function () {
            function updatePhonePrefixes() {
                var branch = $("#branchField").val().trim(); // Get branch value

                // Define the prefix mapping based on branch
                var prefix = "";
                if (branch === "AUH" || branch === "DXB") {
                    prefix = "+971 "; // UAE (Abu Dhabi, Dubai)
                } else if (branch === "OMN") {
                    prefix = "+968 "; // Oman
                } else if (branch === "QAT") {
                    prefix = "+974 "; // Qatar
                }

                // Update all phone fields with the prefix if not already set
                if (prefix) {
                    $("#MainPhone, #PersonInChargePhoneNumber, #PurchasingPersonPhoneNumber, #CompanyOwnerPhoneNumber").each(function () {
                        var currentVal = $(this).val().trim();

                        // Ensure we don't overwrite a valid number from the lead
                        if (currentVal !== "" && currentVal.startsWith(prefix)) {
                            return; // Already correct, skip updating
                        }

                        // Extract only the number part (removing any existing country code)
                        var numericPart = currentVal.replace(/^\+\d+\s*/, ""); // Removes existing prefix
                        $(this).val(prefix + numericPart); // Apply correct prefix
                    });
                }
            }

            // Run when the page loads in case Branch is pre-filled
            updatePhonePrefixes();

            // Run when Branch field changes
            $("#branchField").on("input change", function () {
                updatePhonePrefixes();
            });
        });

    </script>

    }

